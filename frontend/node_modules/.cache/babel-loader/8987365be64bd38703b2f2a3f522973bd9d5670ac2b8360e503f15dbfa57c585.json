{"ast":null,"code":"var _jsxFileName = \"/Users/grigarian/ituphub-client/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport function useAuth() {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [user, setUser] = useState(null);\n\n  // При монтировании загружаем пользователя с сервера\n  useEffect(() => {\n    async function fetchUser() {\n      try {\n        const {\n          data\n        } = await axios.get('/user/current', {\n          withCredentials: true\n        });\n        setUser(data);\n      } catch {\n        setUser(null);\n      }\n    }\n    fetchUser();\n  }, []);\n  const login = async (email, password) => {\n    // Пример логина — подстрой под свой API\n    const {\n      data\n    } = await axios.post('/user/login', {\n      email,\n      password\n    }, {\n      withCredentials: true\n    });\n    setUser(data);\n  };\n  const logout = async () => {\n    await axios.post('/user/logout', {}, {\n      withCredentials: true\n    });\n    setUser(null);\n  };\n  const updateUser = newUserData => {\n    setUser(prev => prev ? {\n      ...prev,\n      ...newUserData\n    } : prev);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      updateUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","fetchUser","data","get","withCredentials","login","email","password","post","logout","updateUser","newUserData","prev","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/grigarian/ituphub-client/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport axios from 'axios';\n\ninterface User {\n  id: string;\n  userName: string;\n  email: string;\n  bio?: string;\n  profilePicture?: string;\n  // ... другие поля\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  updateUser: (newUserData: Partial<User>) => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n\n  // При монтировании загружаем пользователя с сервера\n  useEffect(() => {\n    async function fetchUser() {\n      try {\n        const { data } = await axios.get<User>('/user/current', { withCredentials: true });\n        setUser(data);\n      } catch {\n        setUser(null);\n      }\n    }\n    fetchUser();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    // Пример логина — подстрой под свой API\n    const { data } = await axios.post<User>(\n      '/user/login',\n      { email, password },\n      { withCredentials: true }\n    );\n    setUser(data);\n  };\n\n  const logout = async () => {\n    await axios.post('/user/logout', {}, { withCredentials: true });\n    setUser(null);\n  };\n\n  const updateUser = (newUserData: Partial<User>) => {\n    setUser((prev) => (prev ? { ...prev, ...newUserData } : prev));\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, updateUser }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AACxF,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAkB1B,MAAMC,WAAW,gBAAGP,aAAa,CAA8BQ,SAAS,CAAC;AAEzE,OAAO,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAMC,OAAO,GAAGV,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACI,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB;AAACD,EAAA,CANeD,OAAO;AAYvB,OAAO,SAASI,YAAYA,CAAC;EAAEC;AAA4B,CAAC,EAAE;EAAAC,GAAA;EAC5D,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAc,IAAI,CAAC;;EAEnD;EACAC,SAAS,CAAC,MAAM;IACd,eAAee,SAASA,CAAA,EAAG;MACzB,IAAI;QACF,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAO,eAAe,EAAE;UAAEC,eAAe,EAAE;QAAK,CAAC,CAAC;QAClFJ,OAAO,CAACE,IAAI,CAAC;MACf,CAAC,CAAC,MAAM;QACNF,OAAO,CAAC,IAAI,CAAC;MACf;IACF;IACAC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAK;IACvD;IACA,MAAM;MAAEL;IAAK,CAAC,GAAG,MAAMf,KAAK,CAACqB,IAAI,CAC/B,aAAa,EACb;MAAEF,KAAK;MAAEC;IAAS,CAAC,EACnB;MAAEH,eAAe,EAAE;IAAK,CAC1B,CAAC;IACDJ,OAAO,CAACE,IAAI,CAAC;EACf,CAAC;EAED,MAAMO,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,MAAMtB,KAAK,CAACqB,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE;MAAEJ,eAAe,EAAE;IAAK,CAAC,CAAC;IAC/DJ,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,MAAMU,UAAU,GAAIC,WAA0B,IAAK;IACjDX,OAAO,CAAEY,IAAI,IAAMA,IAAI,GAAG;MAAE,GAAGA,IAAI;MAAE,GAAGD;IAAY,CAAC,GAAGC,IAAK,CAAC;EAChE,CAAC;EAED,oBACEvB,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAEf,IAAI;MAAEM,KAAK;MAAEI,MAAM;MAAEC;IAAW,CAAE;IAAAb,QAAA,EAC9DA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACpB,GAAA,CAxCeF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}