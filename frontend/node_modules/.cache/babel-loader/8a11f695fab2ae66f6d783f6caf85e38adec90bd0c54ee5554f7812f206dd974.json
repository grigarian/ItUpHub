{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from 'react';\nimport * as signalR from '@microsoft/signalr';\nimport toast from 'react-hot-toast';\nexport function useNotificationHub(userId, accessToken) {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const connection = useRef(null);\n  useEffect(() => {\n    if (!userId || !accessToken) return; // ждем и userId, и токен\n\n    connection.current = new signalR.HubConnectionBuilder().withUrl(\"http://localhost:5230/hubs/notifications\", {\n      accessTokenFactory: () => {\n        var _localStorage$getItem;\n        return (_localStorage$getItem = localStorage.getItem(\"access_token\")) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : \"\";\n      }\n    }).build();\n    connection.current.start().then(() => {\n      var _connection$current;\n      console.log('SignalR connected');\n      (_connection$current = connection.current) === null || _connection$current === void 0 ? void 0 : _connection$current.on('ReceiveNotification', message => {\n        setNotifications(prev => [...prev, message]);\n        console.log(\"Получено уведомление:\", message);\n        toast.success(message);\n      });\n\n      // Если нужно: регистрация пользователя на сервере\n      // connection.current.invoke('RegisterUser', userId).catch(console.error);\n    }).catch(err => console.error('Ошибка подключения SignalR:', err));\n    return () => {\n      var _connection$current2;\n      (_connection$current2 = connection.current) === null || _connection$current2 === void 0 ? void 0 : _connection$current2.stop();\n    };\n  }, [userId, accessToken]);\n  return notifications;\n}\n_s(useNotificationHub, \"R1XlLgYuuxk3J4sCmZIIBY170CE=\");","map":{"version":3,"names":["useEffect","useState","useRef","signalR","toast","useNotificationHub","userId","accessToken","_s","notifications","setNotifications","connection","current","HubConnectionBuilder","withUrl","accessTokenFactory","_localStorage$getItem","localStorage","getItem","build","start","then","_connection$current","console","log","on","message","prev","success","catch","err","error","_connection$current2","stop"],"sources":["/Users/grigarian/ituphub-client/src/utils/hooks/useNotifications.tsx"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport * as signalR from '@microsoft/signalr';\nimport toast from 'react-hot-toast';\n\nexport function useNotificationHub(userId: string | null, accessToken: string | null) {\n  const [notifications, setNotifications] = useState<string[]>([]);\n  const connection = useRef<signalR.HubConnection | null>(null);\n\n  useEffect(() => {\n    if (!userId || !accessToken) return; // ждем и userId, и токен\n\n    connection.current = new signalR.HubConnectionBuilder()\n      .withUrl(\"http://localhost:5230/hubs/notifications\", {\n    accessTokenFactory: () => localStorage.getItem(\"access_token\") ?? \"\"\n  })\n  .build();\n\n    connection.current\n      .start()\n      .then(() => {\n        console.log('SignalR connected');\n\n        connection.current?.on('ReceiveNotification', (message: string) => {\n          setNotifications(prev => [...prev, message]);\n          console.log(\"Получено уведомление:\", message);\n          toast.success(message);\n        });\n\n        // Если нужно: регистрация пользователя на сервере\n        // connection.current.invoke('RegisterUser', userId).catch(console.error);\n      })\n      .catch(err => console.error('Ошибка подключения SignalR:', err));\n\n    return () => {\n      connection.current?.stop();\n    };\n  }, [userId, accessToken]);\n\n  return notifications;\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACnD,OAAO,KAAKC,OAAO,MAAM,oBAAoB;AAC7C,OAAOC,KAAK,MAAM,iBAAiB;AAEnC,OAAO,SAASC,kBAAkBA,CAACC,MAAqB,EAAEC,WAA0B,EAAE;EAAAC,EAAA;EACpF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAW,EAAE,CAAC;EAChE,MAAMU,UAAU,GAAGT,MAAM,CAA+B,IAAI,CAAC;EAE7DF,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,MAAM,IAAI,CAACC,WAAW,EAAE,OAAO,CAAC;;IAErCI,UAAU,CAACC,OAAO,GAAG,IAAIT,OAAO,CAACU,oBAAoB,CAAC,CAAC,CACpDC,OAAO,CAAC,0CAA0C,EAAE;MACvDC,kBAAkB,EAAEA,CAAA;QAAA,IAAAC,qBAAA;QAAA,QAAAA,qBAAA,GAAMC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,cAAAF,qBAAA,cAAAA,qBAAA,GAAI,EAAE;MAAA;IACtE,CAAC,CAAC,CACDG,KAAK,CAAC,CAAC;IAENR,UAAU,CAACC,OAAO,CACfQ,KAAK,CAAC,CAAC,CACPC,IAAI,CAAC,MAAM;MAAA,IAAAC,mBAAA;MACVC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAEhC,CAAAF,mBAAA,GAAAX,UAAU,CAACC,OAAO,cAAAU,mBAAA,uBAAlBA,mBAAA,CAAoBG,EAAE,CAAC,qBAAqB,EAAGC,OAAe,IAAK;QACjEhB,gBAAgB,CAACiB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,OAAO,CAAC,CAAC;QAC5CH,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEE,OAAO,CAAC;QAC7CtB,KAAK,CAACwB,OAAO,CAACF,OAAO,CAAC;MACxB,CAAC,CAAC;;MAEF;MACA;IACF,CAAC,CAAC,CACDG,KAAK,CAACC,GAAG,IAAIP,OAAO,CAACQ,KAAK,CAAC,6BAA6B,EAAED,GAAG,CAAC,CAAC;IAElE,OAAO,MAAM;MAAA,IAAAE,oBAAA;MACX,CAAAA,oBAAA,GAAArB,UAAU,CAACC,OAAO,cAAAoB,oBAAA,uBAAlBA,oBAAA,CAAoBC,IAAI,CAAC,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,CAAC3B,MAAM,EAAEC,WAAW,CAAC,CAAC;EAEzB,OAAOE,aAAa;AACtB;AAACD,EAAA,CAnCeH,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}