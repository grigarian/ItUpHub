// <auto-generated />
using System;
using System.Collections.Generic;
using GrowSphere.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GrowSphere.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250531161145_RemoveVacancy")]
    partial class RemoveVacancy
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GrowSphere.Domain.Models.CategoryModel.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("Title", "GrowSphere.Domain.Models.CategoryModel.Category.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pK_category");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.IssueModel.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AssignedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("assigned_to_user_id");

                    b.Property<Guid?>("AssignerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("assigner_user_id");

                    b.Property<DateTime>("CompleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("complete_date");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "GrowSphere.Domain.Models.IssueModel.Issue.Description#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Picture", "GrowSphere.Domain.Models.IssueModel.Issue.Picture#Picture", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("MimeType")
                                .HasColumnType("text")
                                .HasColumnName("mime_type");

                            b1.Property<string>("Path")
                                .HasColumnType("text")
                                .HasColumnName("picture_path");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Status", "GrowSphere.Domain.Models.IssueModel.Issue.Status#IssueStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("status");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "GrowSphere.Domain.Models.IssueModel.Issue.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pK_issue");

                    b.HasIndex("AssignedUserId")
                        .HasDatabaseName("iX_issue_assigned_to_user_id");

                    b.HasIndex("AssignerUserId")
                        .HasDatabaseName("iX_issue_assigner_user_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("iX_issue_project_id");

                    b.ToTable("issue", (string)null);
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.JoinRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ManagerComment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("manager_comment");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("message");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pK_join_requests");

                    b.ToTable("join_requests", (string)null);
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.NotificationModel.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("message");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_notification");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_notification_userId");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.ProjectMessage.ProjectMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("content");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.HasKey("Id")
                        .HasName("pK_project_messages");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("iX_project_messages_projectId");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("iX_project_messages_sender_id");

                    b.ToTable("project_messages", (string)null);
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.ProjectModel.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("categoryId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "GrowSphere.Domain.Models.ProjectModel.Project.Description#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Status", "GrowSphere.Domain.Models.ProjectModel.Project.Status#ProjectStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("status");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "GrowSphere.Domain.Models.ProjectModel.Project.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pK_project");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("iX_project_categoryId");

                    b.ToTable("project", (string)null);
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.ProjectModel.ProjectMember", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("UserId", "ProjectId")
                        .HasName("pK_project_member");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("iX_project_member_projectId");

                    b.ToTable("project_member", (string)null);
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.SkillModel.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("Title", "GrowSphere.Domain.Models.SkillModel.Skill.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pK_skill");

                    b.ToTable("skill", (string)null);
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.UserModel.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.ComplexProperty<Dictionary<string, object>>("Bio", "GrowSphere.Domain.Models.UserModel.User.Bio#Bio", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("bio");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Email", "GrowSphere.Domain.Models.UserModel.User.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "GrowSphere.Domain.Models.UserModel.User.Name#UserName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("username");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ProfilePicture", "GrowSphere.Domain.Models.UserModel.User.ProfilePicture#Picture", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("MimeType")
                                .HasColumnType("text")
                                .HasColumnName("mime_type");

                            b1.Property<string>("Path")
                                .HasColumnType("text")
                                .HasColumnName("path");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UserStatus", "GrowSphere.Domain.Models.UserModel.User.UserStatus#UserStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("status");
                        });

                    b.HasKey("Id")
                        .HasName("pK_user");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.UserModel.UserProject", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("UserId", "ProjectId")
                        .HasName("pK_user_project");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("iX_user_project_projectId");

                    b.ToTable("user_project", (string)null);
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.UserModel.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.HasKey("UserId", "SkillId")
                        .HasName("pK_user_skill");

                    b.HasIndex("SkillId")
                        .HasDatabaseName("iX_user_skill_skillId");

                    b.ToTable("user_skill", (string)null);
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.IssueModel.Issue", b =>
                {
                    b.HasOne("GrowSphere.Domain.Models.UserModel.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fK_issue_user_assigned_to_user_id");

                    b.HasOne("GrowSphere.Domain.Models.UserModel.User", "AssignerUser")
                        .WithMany()
                        .HasForeignKey("AssignerUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fK_issue_user_assigner_user_id");

                    b.HasOne("GrowSphere.Domain.Models.ProjectModel.Project", "Project")
                        .WithMany("Issues")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_issue_project_project_id");

                    b.Navigation("AssignedUser");

                    b.Navigation("AssignerUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.NotificationModel.Notification", b =>
                {
                    b.HasOne("GrowSphere.Domain.Models.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_notification_user_userId");
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.ProjectMessage.ProjectMessage", b =>
                {
                    b.HasOne("GrowSphere.Domain.Models.ProjectModel.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_project_messages_project_projectId");

                    b.HasOne("GrowSphere.Domain.Models.UserModel.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_project_messages_user_sender_id");

                    b.Navigation("Project");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.ProjectModel.Project", b =>
                {
                    b.HasOne("GrowSphere.Domain.Models.CategoryModel.Category", "Category")
                        .WithMany("Projects")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_project_category_categoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.ProjectModel.ProjectMember", b =>
                {
                    b.HasOne("GrowSphere.Domain.Models.ProjectModel.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fK_project_member_project_projectId");

                    b.HasOne("GrowSphere.Domain.Models.UserModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_project_member_user_user_id");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.UserModel.UserProject", b =>
                {
                    b.HasOne("GrowSphere.Domain.Models.ProjectModel.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_user_project_project_projectId");

                    b.HasOne("GrowSphere.Domain.Models.UserModel.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fK_user_project_user_userId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.UserModel.UserSkill", b =>
                {
                    b.HasOne("GrowSphere.Domain.Models.SkillModel.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_user_skill_skill_skillId");

                    b.HasOne("GrowSphere.Domain.Models.UserModel.User", "User")
                        .WithMany("Skills")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fK_user_skill_user_userId");

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.CategoryModel.Category", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.ProjectModel.Project", b =>
                {
                    b.Navigation("Issues");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("GrowSphere.Domain.Models.UserModel.User", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
